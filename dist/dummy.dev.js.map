{"version":3,"names":[],"mappings":"","sources":["dummy.dev.js"],"sourcesContent":["'use strict';\n\n(function () {\n\n            var Dummy = {},\n                dummyTextFillTags = [],\n                isEnabled = true,\n                debug = true;\n\n            Dummy = {\n                        log: function log(message) {\n\n                                    if (debug) console.debug('Dummy.js Debug: ' + message);\n                        },\n                        resolveConfig: function resolveConfig() {\n                                    var _this = this;\n\n                                    var scriptTags = document.getElementsByTagName('script');\n\n                                    for (var i = 0; i < scriptTags.length; i++) {\n\n                                                var currentTag = scriptTags[i],\n                                                    src = currentTag.getAttribute('src');\n\n                                                if (src && src.toLowerCase().indexOf('dummy') > 0) {\n\n                                                            var configTags = currentTag.getAttribute('data-dummy');\n\n                                                            this.log('found anchoring tag in DOM');\n\n                                                            if (!configTags) {\n\n                                                                        this.log('did not find any `data-dummy` attribute; configuration done');\n                                                                        return;\n                                                            }\n\n                                                            configTags = configTags.split(',');\n                                                            configTags.forEach(function (configTag) {\n\n                                                                        _this.log('resolved; `' + configTag + '`');\n\n                                                                        if (configTag === 'debug') debug = true;\n                                                                        if (configTag === 'disable' || configTag === 'disabled') {\n\n                                                                                    isEnabled = false;\n                                                                                    _this.log('SCRIPT DISABLED');\n                                                                        }\n                                                            });\n                                                }\n                                    }\n                        },\n                        indexElements: function indexElements() {\n\n                                    var textTags = document.querySelectorAll('p, span');\n\n                                    if (!textTags || textTags.length === 0) {\n\n                                                this.log('no \\'p\\' or \\'span\\' elements found');\n                                                return;\n                                    }\n\n                                    for (var i = 0; i < textTags.length; i++) {\n\n                                                var currentElement = textTags[i],\n                                                    dummyDataValue = currentElement.getAttribute('data-dummy-fill');\n\n                                                if (dummyDataValue !== null) {\n\n                                                            dummyTextFillTags.push(currentElement);\n                                                }\n                                    }\n\n                                    if (dummyTextFillTags.length === 0) {\n\n                                                this.log('no DummyJS-enabled DOM elements found in current tree');\n                                    } else {\n\n                                                this.log('index ' + dummyTextFillTags.length + ' elements in current DOM tree');\n                                    }\n                        },\n\n\n                        dummy: function dummy() {\n\n                                    for (var i = 0; i < dummyTextFillTags; i++) {\n\n                                                var currentElement = dummyTextFillTags[i];\n                                                var dummyAttribute = currentElement.getAttribute('data-dummy');\n                                                var parameters = dummyAttribute.split('-'); //I have doubts with this line. \"3-para\".split(-)?\n\n                                                currentElement.textContent = this.lorem(parameters[1], parameters[0]);\n                                    }\n                        },\n\n                        lorem: function lorem(type, number) {\n                                    //Returns lorem ipsum text.\n\n                                    var ipsumArray = []; //Stores considerably large dictionary of ipsum words.\n\n                                    switch (type) {\n                                                case 'word':\n                                                            return this.loremWords(ipsumArray, number);\n                                                case 'sentence':\n                                                            return this.loremSentences(ipsumArray, number);\n                                                case 'paragraph':\n                                                            return this.loremParagraphs(ipsumArray, number);\n                                                default:\n                                                            console.log(\"Invalid 'type' parameter supplied to Dummy.lorem(type, number)\");\n                                    }\n                        },\n\n                        loremWords: function loremWords(dict, number) {\n                                    //String[] dict is an array of ipsum words.\n\n                                    var ipsumString = '';\n\n                                    for (var i = 0; i < number; i++) {\n                                                ipsumString = ipsumString + dict[Math.floor(Math.random() * ipsumArray.length())] + ' ';\n                                    }\n\n                                    return ipsumString;\n                        },\n\n                        loremSentences: function loremSentences(dict, number) {\n\n                                    var ipsumString = '';\n\n                                    for (var i = 0; i < number; i++) {\n\n                                                sentenceLength = Math.floor(Math.random() * 5 + 3);\n                                                ipsumString = ipsumString + this.capitalize(this.loremWords(dict, 1)) + this.loremWords(dict, sentenceLength) + this.loremWords(dict, 1).trim() + '. ';\n                                    }\n\n                                    return ipsumString;\n                        },\n\n                        loremParagraphs: function loremParagraphs(dict, number) {\n\n                                    var ipsumString = '';\n\n                                    for (var i = 0; i < number; i++) {\n\n                                                paragraphLength = Math.floor(Math.random() * 4 + 7);\n                                                ipsumString += this.loremSentences(dict, paragraphLength);\n                                    }\n\n                                    return ipsumString;\n                        },\n\n                        capitalize: function capitalize(str) {\n                                    //Helper function\n                                    return str.charAt(0).toUpperCase() + str.subString(1, str.length());\n                        },\n\n                        init: function init() {\n                                    //Initializes script and calls this.dummy()\n\n                                    this.resolveConfig();\n\n                                    if (!isEnabled) {\n                                                return;\n                                    }\n\n                                    this.indexElements();\n                                    this.dummy();\n                        }\n\n            };\n\n            Dummy.init(); //Call for global context.\n})();"],"file":"dummy.dev.js"}