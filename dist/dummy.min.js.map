{"version":3,"names":[],"mappings":"","sources":["dummy.min.js"],"sourcesContent":["'use strict';\n\n(function () {\n\n  var Dummy = {},\n      dummyTextTags = [],\n      isEnabled = true;\n\n  Dummy = {\n    resolveConfig: function resolveConfig() {\n\n      var scriptTags = document.getElementsByTagName('script');\n\n      scriptTags.forEach(function (currentTag) {\n\n        var src = currentTag.getAttribute('src');\n\n        isEnabled = src.indexOf('#disabled') > 0;\n      });\n    },\n\n\n    indexElements: function indexElements() {\n      //Generates index of all elements to inject dummy in.\n      var textTags = document.querySelectorAll('p, span');\n      if (textTags == null || textTags.length <= 0) {\n        console.log(\"Dummy.js Debug: No 'p' or 'span' elements found\");\n        return;\n      }\n\n      for (var i = 0; i < textTags.length(); i++) {\n        var currentElement = textTags[i];\n        var dummyDataValue = currentElement.getAttribute('data-dummy');\n        if (dummyDataValue == null) {\n          continue;\n        } else {\n          dummyTextTags.push(currentTag);\n        }\n      }\n\n      if (dummyTextTags.length() == 0) {\n        console.log(\"Dummy.js Debug: No elements with 'data-dummy' attribute found\");\n      } else {\n        console.log('Dummy.js: Indexed ' + dummyTextTags.length() + ' elements.');\n      }\n    },\n\n    dummy: function dummy() {\n      for (var i = 0; i < dummyTextTags; i++) {\n        var currentElement = dummyTextTags[i];\n        var dummyAttribute = currentElement.getAttribute('data-dummy');\n        var parameters = dummyAttribute.split('-'); //I have doubts with this line. \"3-para\".split(-)?\n        currentElement.textContent = this.lorem(parameters[1], parameters[0]);\n      }\n    },\n\n    lorem: function lorem(type, number) {\n      //Returns lorem ipsum text.\n      var ipsumArray = []; //Stores considerably large dictionary of ipsum words.\n      if (type == 'word') {\n        return this.loremWords(ipsumArray, number);\n      } else if (type == 'sentence') {\n        return this.loremSentences(ipsumArray, number);\n      } else if (type == 'paragraph') {\n        return this.loremParagraphs(ipsumArray, number);\n      } else {\n        console.log(\"Invalid 'type' parameter supplied to Dummy.lorem(type, number)\");\n      }\n    },\n\n    loremWords: function loremWords(dict, number) {\n      //String[] dict is an array of ipsum words.\n      var ipsumString = '';\n      for (var i = 0; i < number; i++) {\n        ipsumString = ipsumString + dict[Math.floor(Math.random() * ipsumArray.length())] + \" \";\n      }\n      return ipsumString;\n    },\n\n    loremSentences: function loremSentences(dict, number) {\n      var ipsumString = '';\n      for (var i = 0; i < number; i++) {\n        sentenceLength = Math.floor(Math.random() * 5 + 3);\n        ipsumString = ipsumString + this.capitalize(this.loremWords(dict, 1)) + this.loremWords(dict, sentenceLength) + this.loremWords(dict, 1).trim() + \". \";\n      }\n      return ipsumString;\n    },\n\n    loremParagraphs: function loremParagraphs(dict, number) {\n      var ipsumString = '';\n      for (var i = 0; i < number; i++) {\n        paragraphLength = Math.floor(Math.random() * 4 + 7);\n        ipsumString += this.loremSentences(dict, paragraphLength);\n      }\n      return ipsumString;\n    },\n\n    capitalize: function capitalize(str) {\n      //Helper function\n      return str.charAt(0).toUpperCase() + str.subString(1, str.length());\n    },\n\n    init: function init() {\n      //Initializes script and calls this.dummy()\n      this.resolveConfig();\n      if (!isEnabled) {\n        return;\n      }\n      this.indexElements();\n      this.dummy();\n    }\n\n  };\n  Dummy.init(); //Call for global context.\n})();"],"file":"dummy.min.js"}