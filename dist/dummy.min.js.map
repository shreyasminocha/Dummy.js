{"version":3,"sources":["dummy.min.js"],"names":["Dummy","dummyTextTags","isEnabled","resolveConfig","scriptTags","document","getElementsByTagName","i","length","currentTag","src","getAttribute","toLowerCase","indexOf","indexElements","textTags","querySelectorAll","console","log","currentElement","dummyDataValue","push","dummy","dummyAttribute","parameters","split","textContent","this","lorem","type","number","ipsumArray","loremWords","loremSentences","loremParagraphs","dict","ipsumString","Math","floor","random","sentenceLength","capitalize","trim","paragraphLength","str","charAt","toUpperCase","subString","init"],"mappings":"AAAA,cAEA,WAEY,GAAIA,MACAC,KACAC,GAAY,CAEhBF,IAEYG,cAAe,WAKH,IAAK,GAFDC,GAAaC,SAASC,qBAAqB,UAEtCC,EAAI,EAAGA,EAAIH,EAAWI,SAAUD,IAAK,CAElC,GAAIE,GAAaL,EAAWG,GACxBG,EAAMD,EAAWE,aAAa,MAElC,IAAW,MAAPD,GAAeA,EAAIE,cAAcC,QAAQ,WAAY,GAIrDH,EAAIG,QAAQ,eAAgB,EAAI,CACxBX,GAAY,CACZ,UAKpCY,cAAe,WAGH,GAAIC,GAAWV,SAASW,iBAAiB,UAEzC,IAAgB,MAAZD,GAAoBA,EAASP,QAAU,EAE/B,WADAS,SAAQC,IAAI,kDAIxB,KAAK,GAAIX,GAAI,EAAGA,EAAIQ,EAASP,SAAUD,IAAK,CAEhC,GAAIY,GAAiBJ,EAASR,GAC1Ba,EAAiBD,EAAeR,aAAa,aAE3B,OAAlBS,GAGQnB,EAAcoB,KAAKZ,YAIb,GAA1BR,EAAcO,SACNS,QAAQC,IAAI,iEAEZD,QAAQC,IAAI,qBAAuBjB,EAAcO,SAAW,eAIpFc,MAAO,WAEK,IAAK,GAAIf,GAAI,EAAGA,EAAIN,EAAeM,IAAK,CAE5B,GAAIY,GAAiBlB,EAAcM,GAC/BgB,EAAiBJ,EAAeR,aAAa,cAC7Ca,EAAaD,EAAeE,MAAM,IAEtCN,GAAeO,YAAcC,KAAKC,MAAMJ,EAAW,GAAIA,EAAW,MAI1FI,MAAO,SAAeC,EAAMC,GAGhB,GAAIC,KAEJ,QAAQF,GACI,IAAK,OACO,MAAOF,MAAKK,WAAWD,EAAYD,EAC/C,KAAK,WACO,MAAOH,MAAKM,eAAeF,EAAYD,EACnD,KAAK,YACO,MAAOH,MAAKO,gBAAgBH,EAAYD,EACpD,SACYb,QAAQC,IAAI,oEAIhDc,WAAY,SAAoBG,EAAML,GAK1B,IAAK,GAFDM,GAAc,GAET7B,EAAI,EAAGA,EAAIuB,EAAQvB,IAChB6B,EAAcA,EAAcD,EAAKE,KAAKC,MAAMD,KAAKE,SAAWR,WAAWvB,WAAa,GAGhG,OAAO4B,IAGnBH,eAAgB,SAAwBE,EAAML,GAIlC,IAAK,GAFDM,GAAc,GAET7B,EAAI,EAAGA,EAAIuB,EAAQvB,IAEhBiC,eAAiBH,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,GAChDH,EAAcA,EAAcT,KAAKc,WAAWd,KAAKK,WAAWG,EAAM,IAAMR,KAAKK,WAAWG,EAAMK,gBAAkBb,KAAKK,WAAWG,EAAM,GAAGO,OAAS,IAG9J,OAAON,IAGnBF,gBAAiB,SAAyBC,EAAML,GAIpC,IAAK,GAFDM,GAAc,GAET7B,EAAI,EAAGA,EAAIuB,EAAQvB,IAEhBoC,gBAAkBN,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,GACjDH,GAAeT,KAAKM,eAAeE,EAAMQ,gBAGrD,OAAOP,IAGnBK,WAAY,SAAoBG,GAEpB,MAAOA,GAAIC,OAAO,GAAGC,cAAgBF,EAAIG,UAAU,EAAGH,EAAIpC,WAGtEwC,KAAM,WAGMrB,KAAKxB,gBAEAD,IAILyB,KAAKb,gBACLa,KAAKL,WAK7BtB,EAAMgD","file":"dummy.min.js","sourcesContent":["'use strict';\n\n(function () {\n\n            var Dummy = {}; //Stores Dummy.js codebase.\n            var dummyTextTags = []; //Array of tags with 'data-dummy' attribute\n            var isEnabled = true;\n\n            Dummy = {\n\n                        resolveConfig: function resolveConfig() {\n                                    //Checks if disabled tag is present.\n\n                                    var scriptTags = document.getElementsByTagName('script');\n\n                                    for (var i = 0; i < scriptTags.length(); i++) {\n\n                                                var currentTag = scriptTags[i];\n                                                var src = currentTag.getAttribute('src');\n\n                                                if (src == null || src.toLowerCase().indexOf('dummy') == -1) {\n                                                            continue;\n                                                }\n\n                                                if (src.indexOf('#disabled') != -1) {\n                                                            isEnabled = false;\n                                                            break;\n                                                }\n                                    }\n                        },\n\n                        indexElements: function indexElements() {\n                                    //Generates index of all elements to inject dummy in.\n\n                                    var textTags = document.querySelectorAll('p, span');\n\n                                    if (textTags == null || textTags.length <= 0) {\n                                                console.log(\"Dummy.js Debug: No 'p' or 'span' elements found\");\n                                                return;\n                                    }\n\n                                    for (var i = 0; i < textTags.length(); i++) {\n\n                                                var currentElement = textTags[i];\n                                                var dummyDataValue = currentElement.getAttribute('data-dummy');\n\n                                                if (dummyDataValue == null) {\n                                                            continue;\n                                                } else {\n                                                            dummyTextTags.push(currentTag);\n                                                }\n                                    }\n\n                                    if (dummyTextTags.length() == 0) {\n                                                console.log(\"Dummy.js Debug: No elements with 'data-dummy' attribute found\");\n                                    } else {\n                                                console.log('Dummy.js: Indexed ' + dummyTextTags.length() + ' elements.');\n                                    }\n                        },\n\n                        dummy: function dummy() {\n\n                                    for (var i = 0; i < dummyTextTags; i++) {\n\n                                                var currentElement = dummyTextTags[i];\n                                                var dummyAttribute = currentElement.getAttribute('data-dummy');\n                                                var parameters = dummyAttribute.split('-'); //I have doubts with this line. \"3-para\".split(-)?\n\n                                                currentElement.textContent = this.lorem(parameters[1], parameters[0]);\n                                    }\n                        },\n\n                        lorem: function lorem(type, number) {\n                                    //Returns lorem ipsum text.\n\n                                    var ipsumArray = []; //Stores considerably large dictionary of ipsum words.\n\n                                    switch (type) {\n                                                case 'word':\n                                                            return this.loremWords(ipsumArray, number);\n                                                case 'sentence':\n                                                            return this.loremSentences(ipsumArray, number);\n                                                case 'paragraph':\n                                                            return this.loremParagraphs(ipsumArray, number);\n                                                default:\n                                                            console.log(\"Invalid 'type' parameter supplied to Dummy.lorem(type, number)\");\n                                    }\n                        },\n\n                        loremWords: function loremWords(dict, number) {\n                                    //String[] dict is an array of ipsum words.\n\n                                    var ipsumString = '';\n\n                                    for (var i = 0; i < number; i++) {\n                                                ipsumString = ipsumString + dict[Math.floor(Math.random() * ipsumArray.length())] + ' ';\n                                    }\n\n                                    return ipsumString;\n                        },\n\n                        loremSentences: function loremSentences(dict, number) {\n\n                                    var ipsumString = '';\n\n                                    for (var i = 0; i < number; i++) {\n\n                                                sentenceLength = Math.floor(Math.random() * 5 + 3);\n                                                ipsumString = ipsumString + this.capitalize(this.loremWords(dict, 1)) + this.loremWords(dict, sentenceLength) + this.loremWords(dict, 1).trim() + '. ';\n                                    }\n\n                                    return ipsumString;\n                        },\n\n                        loremParagraphs: function loremParagraphs(dict, number) {\n\n                                    var ipsumString = '';\n\n                                    for (var i = 0; i < number; i++) {\n\n                                                paragraphLength = Math.floor(Math.random() * 4 + 7);\n                                                ipsumString += this.loremSentences(dict, paragraphLength);\n                                    }\n\n                                    return ipsumString;\n                        },\n\n                        capitalize: function capitalize(str) {\n                                    //Helper function\n                                    return str.charAt(0).toUpperCase() + str.subString(1, str.length());\n                        },\n\n                        init: function init() {\n                                    //Initializes script and calls this.dummy()\n\n                                    this.resolveConfig();\n\n                                    if (!isEnabled) {\n                                                return;\n                                    }\n\n                                    this.indexElements();\n                                    this.dummy();\n                        }\n\n            };\n\n            Dummy.init(); //Call for global context.\n})();"]}