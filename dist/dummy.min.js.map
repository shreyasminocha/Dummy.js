{"version":3,"sources":["dummy.min.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Dummy","this","elements","document","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","value","config","parseConfig","getAttribute","innerText","generate","err","return","segments","split","count","type","dictionary","words","randomElement","sentenceCase","trim","sentences","_i","randomInteger","paragraphs","_i2","console","error","array","min","max","Math","floor","random","string","firstLetter","charAt","toUpperCase","rest","slice","window","onload"],"mappings":"AAAA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MAI5hBkB,MAAQ,WACR,QAASA,KACLpB,gBAAgBqB,KAAMD,EAEtB,IAAIE,GAAWC,SAASC,iBAAiB,gBAErCC,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KACI,IAAK,GAA6CC,GAAzCC,EAAYR,EAASS,OAAOC,cAAsBP,GAA6BI,EAAQC,EAAUG,QAAQC,MAAOT,GAA4B,EAAM,CACvJ,GAAIU,GAAUN,EAAMO,MAEhBC,EAAShB,KAAKiB,YAAYH,EAAQI,aAAa,cACnDJ,GAAQK,UAAYnB,KAAKoB,SAASJ,IAExC,MAAOK,GACLhB,GAAoB,EACpBC,EAAiBe,EACnB,QACE,KACSjB,GAA6BK,EAAUa,QACxCb,EAAUa,SAEhB,QACE,GAAIjB,EACA,KAAMC,KA+EtB,MAzEAvB,cAAagB,IACTJ,IAAK,cACLoB,MAAO,SAAqBC,GACxB,GAAIO,GAAWP,EAAOQ,MAAM,IAE5B,QACIC,MAAOF,EAAS,GAChBG,KAAMH,EAAS,OAIvB5B,IAAK,WACLoB,MAAO,SAAkBC,GACrB,GAAIW,GAAa,uqCAAuqCH,MAAM,IAE9rC,QAAQR,EAAOU,MACX,IAAK,OACL,IAAK,QAGD,IAAK,GAFDE,GAAQ,GAEHzC,EAAI,EAAGA,EAAI6B,EAAOS,MAAOtC,IAC9ByC,GAAS5B,KAAK6B,cAAcF,GAAc,GAG9C,OAAO3B,MAAK8B,aAAaF,EAAMG,OACnC,KAAK,WACL,IAAK,YAGD,IAAK,GAFDC,GAAY,GAEPC,EAAK,EAAGA,EAAKjB,EAAOS,MAAOQ,IAChCD,GAAahC,KAAK8B,aAAa9B,KAAKoB,UAChCK,MAAOzB,KAAKkC,cAAc,EAAG,IAC7BR,KAAM,WACJ,IAGV,OAAOM,EACX,KAAK,YACL,IAAK,aAGD,IAAK,GAFDG,GAAa,GAERC,EAAM,EAAGA,EAAMpB,EAAOS,MAAOW,IAClCD,GAAcnC,KAAKoB,UACfK,MAAOzB,KAAKkC,cAAc,EAAG,IAC7BR,KAAM,cACL,IAGT,OAAOS,EACX,SAEI,MADAE,SAAQC,MAAM,mCAAsCtB,EAAOU,KAAO,KAC3D,OAInB/B,IAAK,gBACLoB,MAAO,SAAuBwB,GAC1B,MAAOA,GAAMvC,KAAKkC,cAAc,EAAGK,EAAMnD,YAG7CO,IAAK,gBACLoB,MAAO,SAAuByB,EAAKC,GAC/B,MAAOC,MAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,KAGzD7C,IAAK,eACLoB,MAAO,SAAsB8B,GACzB,GAAIC,GAAcD,EAAOE,OAAO,GAAGC,cAC/BC,EAAOJ,EAAOK,MAAM,EACxB,OAAO,GAAKJ,EAAcG,MAI3BlD,IAGXoD,QAAOC,OAAS,WACZ,MAAOD,QAAOpD,MAAQ,GAAIA","file":"dummy.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Dummy = function () {\n    function Dummy() {\n        _classCallCheck(this, Dummy);\n\n        var elements = document.querySelectorAll('[data-dummy]');\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var element = _step.value;\n\n                var config = this.parseConfig(element.getAttribute('data-dummy'));\n                element.innerText = this.generate(config);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n\n    _createClass(Dummy, [{\n        key: 'parseConfig',\n        value: function parseConfig(config) {\n            var segments = config.split(' ');\n\n            return {\n                count: segments[0],\n                type: segments[1]\n            };\n        }\n    }, {\n        key: 'generate',\n        value: function generate(config) {\n            var dictionary = 'lorem,ipsum,dolor,sit,amet,consectetur,adipiscing,elit,proin,accumsan,lacus,ut,tristique,ante,est,vehicula,risus,eget,ornare,tortor,libero,sed,donec,porttitor,felis,non,massa,vestibulum,maecenas,urna,pretium,sodales,in,semper,a,leo,morbi,luctus,nisl,id,eleifend,lacinia,quam,orci,consequat,neque,dui,eu,nullam,condimentum,nibh,pulvinar,at,sem,viverra,auctor,mauris,euismod,vulputate,pharetra,suspendisse,quis,bibendum,eros,duis,egestas,venenatis,volutpat,magna,convallis,vivamus,maximus,malesuada,aliquam,ultricies,nisi,laoreet,interdum,turpis,vel,sagittis,ullamcorper,ultrices,velit,placerat,mollis,suscipit,diam,ligula,cursus,scelerisque,porta,vitae,lectus,primis,faucibus,et,posuere,cubilia,curae,sollicitudin,tincidunt,justo,ac,aenean,purus,arcu,finibus,facilisis,varius,dignissim,dapibus,congue,gravida,etiam,mi,cras,molestie,fusce,nunc,blandit,tempus,quisque,aliquet,sapien,erat,fringilla,nam,mattis,nec,rutrum,pellentesque,iaculis,ex,hendrerit,tellus,dictum,odio,praesent,elementum,metus,enim,nulla,augue,feugiat,efficitur,commodo,rhoncus,imperdiet,lobortis,integer,curabitur,phasellus,fames,aptent,taciti,sociosqu,ad,litora,torquent,per,conubia,nostra,inceptos,himenaeos,fermentum'.split(',');\n\n            switch (config.type) {\n                case 'word':\n                case 'words':\n                    var words = '';\n\n                    for (var i = 0; i < config.count; i++) {\n                        words += this.randomElement(dictionary) + ' ';\n                    }\n\n                    return this.sentenceCase(words.trim());\n                case 'sentence':\n                case 'sentences':\n                    var sentences = '';\n\n                    for (var _i = 0; _i < config.count; _i++) {\n                        sentences += this.sentenceCase(this.generate({\n                            count: this.randomInteger(5, 12),\n                            type: 'words'\n                        })) + '. ';\n                    }\n\n                    return sentences;\n                case 'paragraph':\n                case 'paragraphs':\n                    var paragraphs = '';\n\n                    for (var _i2 = 0; _i2 < config.count; _i2++) {\n                        paragraphs += this.generate({\n                            count: this.randomInteger(8, 14),\n                            type: 'sentences'\n                        }) + '\\n';\n                    }\n\n                    return paragraphs;\n                default:\n                    console.error('Error: Invalid dummy fill type \\'' + config.type + '\\'');\n                    return '';\n            }\n        }\n    }, {\n        key: 'randomElement',\n        value: function randomElement(array) {\n            return array[this.randomInteger(0, array.length)];\n        }\n    }, {\n        key: 'randomInteger',\n        value: function randomInteger(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n    }, {\n        key: 'sentenceCase',\n        value: function sentenceCase(string) {\n            var firstLetter = string.charAt(0).toUpperCase();\n            var rest = string.slice(1);\n            return '' + firstLetter + rest;\n        }\n    }]);\n\n    return Dummy;\n}();\n\nwindow.onload = function () {\n    return window.Dummy = new Dummy();\n};"]}