{"version":3,"sources":["dummy.min.js"],"names":["global","initialize","elements","document","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","value","config","parseConfig","getAttribute","innerText","generate","type","count","err","return","segments","split","fill","i","randomElement","wordBank","sentenceCase","trim","_i","randomInteger","_i2","console","error","min","arguments","length","max","Math","floor","random","array","string","firstLetter","charAt","toUpperCase","rest","slice","onload"],"mappings":"AAAA,cAEA,SAAWA,GAGP,QAASC,KACL,GAAIC,GAAWC,SAASC,iBAAiB,gBAErCC,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KACI,IAAK,GAA6CC,GAAzCC,EAAYR,EAASS,OAAOC,cAAsBP,GAA6BI,EAAQC,EAAUG,QAAQC,MAAOT,GAA4B,EAAM,CACvJ,GAAIU,GAAUN,EAAMO,MAEhBC,EAASC,EAAYH,EAAQI,aAAa,cAC9CJ,GAAQK,UAAYC,EAASJ,EAAOK,KAAML,EAAOM,QAEvD,MAAOC,GACLlB,GAAoB,EACpBC,EAAiBiB,EACnB,QACE,KACSnB,GAA6BK,EAAUe,QACxCf,EAAUe,SAEhB,QACE,GAAInB,EACA,KAAMC,KAMtB,QAASW,GAAYD,GACjB,GAAIS,GAAWT,EAAOU,MAAM,IAE5B,QACIJ,MAAOG,EAAS,GAChBJ,KAAMI,EAAS,IAIvB,QAASL,GAASC,EAAMC,GACpB,GAAIK,GAAO,EAEX,QAAQN,GACJ,IAAK,OACL,IAAK,QACD,IAAK,GAAIO,GAAI,EAAGA,EAAIN,EAAOM,IACvBD,GAAQE,EAAcC,GAAY,GAGtCH,GAAOI,EAAaJ,EAAKK,OACzB,MACJ,KAAK,WACL,IAAK,YACD,IAAK,GAAIC,GAAK,EAAGA,EAAKX,EAAOW,IACzBN,GAAQI,EAAaX,EAAS,QAASc,EAAc,EAAG,MAExDP,GAAQ,IAGZ,MACJ,KAAK,YACL,IAAK,aACD,IAAK,GAAIQ,GAAM,EAAGA,EAAMb,EAAOa,IAC3BR,GAAQP,EAAS,YAAac,EAAc,EAAG,KAC/CP,GAAQ,IAGZ,MACJ,SACIS,QAAQC,MAAM,mCAAsChB,EAAO,KAGnE,MAAOM,GASX,QAASO,KACL,GAAII,GAAMC,UAAUC,OAAS,GAAsBjC,SAAjBgC,UAAU,GAAmBA,UAAU,GAAK,EAC1EE,EAAMF,UAAUC,OAAS,GAAsBjC,SAAjBgC,UAAU,GAAmBA,UAAU,GAAK,CAE9E,OAAOG,MAAKC,MAAMD,KAAKE,UAAYH,EAAMH,EAAM,IAAMA,EAGzD,QAAST,GAAcgB,GACnB,MAAOA,GAAMX,EAAcW,EAAML,SAGrC,QAAST,GAAae,GAClB,GAAIC,GAAcD,EAAOE,OAAO,GAAGC,cAC/BC,EAAOJ,EAAOK,MAAM,EACxB,OAAO,GAAKJ,EAAcG,EAjG9B,GAAIpB,GAAW,uqCAAuqCJ,MAAM,IA6E5rC3B,GAAOqD,OAASpD,IAsBjBO","file":"dummy.min.js","sourcesContent":["'use strict';\n\n(function (global) {\n    var wordBank = 'a,ac,accumsan,ad,adipiscing,aenean,aliquam,aliquet,amet,ante,aptent,arcu,at,auctor,augue,bibendum,blandit,commodo,condimentum,congue,consectetur,consequat,conubia,convallis,cras,cubilia,curabitur,curae,cursus,dapibus,diam,dictum,dignissim,dolor,donec,dui,duis,efficitur,egestas,eget,eleifend,elementum,elit,enim,erat,eros,est,et,etiam,eu,euismod,ex,facilisis,fames,faucibus,felis,fermentum,feugiat,finibus,fringilla,fusce,gravida,hendrerit,himenaeos,iaculis,id,imperdiet,in,inceptos,integer,interdum,ipsum,justo,lacinia,lacus,laoreet,lectus,leo,libero,ligula,litora,lobortis,lorem,luctus,maecenas,magna,malesuada,massa,mattis,mauris,maximus,metus,mi,molestie,mollis,morbi,nam,nec,neque,nibh,nisi,nisl,non,nostra,nulla,nullam,nunc,odio,orci,ornare,pellentesque,per,pharetra,phasellus,placerat,porta,porttitor,posuere,praesent,pretium,primis,proin,pulvinar,purus,quam,quis,quisque,rhoncus,risus,rutrum,sagittis,sapien,scelerisque,sed,sem,semper,sit,sociosqu,sodales,sollicitudin,suscipit,suspendisse,taciti,tellus,tempus,tincidunt,torquent,tortor,tristique,turpis,ullamcorper,ultrices,ultricies,urna,ut,varius,vehicula,vel,velit,venenatis,vestibulum,vitae,vivamus,viverra,volutpat,vulputate'.split(',');\n\n    function initialize() {\n        var elements = document.querySelectorAll('[data-dummy]');\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var element = _step.value;\n\n                var config = parseConfig(element.getAttribute('data-dummy'));\n                element.innerText = generate(config.type, config.count);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n\n    function parseConfig(config) {\n        var segments = config.split(' ');\n\n        return {\n            count: segments[0],\n            type: segments[1]\n        };\n    }\n\n    function generate(type, count) {\n        var fill = '';\n\n        switch (type) {\n            case 'word':\n            case 'words':\n                for (var i = 0; i < count; i++) {\n                    fill += randomElement(wordBank) + ' ';\n                }\n\n                fill = sentenceCase(fill.trim());\n                break;\n            case 'sentence':\n            case 'sentences':\n                for (var _i = 0; _i < count; _i++) {\n                    fill += sentenceCase(generate('words', randomInteger(5, 12)));\n\n                    fill += '. ';\n                }\n\n                break;\n            case 'paragraph':\n            case 'paragraphs':\n                for (var _i2 = 0; _i2 < count; _i2++) {\n                    fill += generate('sentences', randomInteger(8, 14));\n                    fill += '\\n';\n                }\n\n                break;\n            default:\n                console.error('Error: Invalid dummy fill type \\'' + type + '\\'');\n        }\n\n        return fill;\n    }\n\n    global.onload = initialize;\n\n    //////////////////////\n    // Helper Functions //\n    //////////////////////\n\n    function randomInteger() {\n        var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function randomElement(array) {\n        return array[randomInteger(array.length)];\n    }\n\n    function sentenceCase(string) {\n        var firstLetter = string.charAt(0).toUpperCase();\n        var rest = string.slice(1);\n        return '' + firstLetter + rest;\n    }\n})(undefined);"]}